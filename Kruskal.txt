class Graph:
    def __init__(self):
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    def find_parent(self, parent, i):
        if parent[i] == i:
            return i
        return self.find_parent(parent, parent[i])

    def union(self, parent, rank, x, y):
        x_root = self.find_parent(parent, x)
        y_root = self.find_parent(parent, y)

        if rank[x_root] < rank[y_root]:
            parent[x_root] = y_root
        elif rank[x_root] > rank[y_root]:
            parent[y_root] = x_root
        else:
            parent[y_root] = x_root
            rank[x_root] += 1

    def kruskal_mst(self):
        result = []
        i, e = 0, 0

        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []

        for node in range(self.V):
            parent.append(node)
            rank.append(0)

        while e < self.V - 1:
            u, v, w = self.graph[i]
            i += 1
            x = self.find_parent(parent, u)
            y = self.find_parent(parent, v)

            if x != y:
                e += 1
                result.append([u, v, w])
                self.union(parent, rank, x, y)

        minimum_cost = 0
        print("Edges in the Minimum Spanning Tree:")
        for u, v, weight in result:
            minimum_cost += weight
            print(f"{u} - {v} : {weight}")

        print(f"\nMinimum Cost of MST: {minimum_cost}")

# Get user input for the graph
g = Graph()
n = int(input("Enter the number of vertices: "))
m = int(input("Enter the number of edges: "))
for _ in range(m):
    u, v, w = map(int, input("Enter edge (u v w): ").split())
    g.add_edge(u, v, w)

g.kruskal_mst()




/*
This code defines a class `Graph` to represent a graph and implements the Kruskal's algorithm to find the Minimum Spanning Tree (MST) of the graph. Here's how it works:

### `Graph` Class:
- Initialization: Initializes an empty list `graph` to store the edges of the graph.
- `add_edge` Method: Adds an edge to the graph with vertices `u` and `v` and weight `w`.
- `find_parent` Method: Finds the parent of a vertex using the union-find algorithm (path compression).
- `union` Method: Performs union operation to merge two sets represented by their parent nodes.
- `kruskal_mst` Method: Implements Kruskal's algorithm to find the Minimum Spanning Tree (MST) of the graph.
  - Sorts the edges of the graph based on their weights.
  - Initializes `parent` and `rank` arrays for the union-find algorithm.
  - Iterates over sorted edges and adds them to the MST if adding the edge does not create a cycle.
  - Prints the edges of the MST and calculates the total cost.

### Kruskal's Algorithm:
1. Sort Edges: Sort all edges in non-decreasing order of their weights.
2. Initialize Sets: Initialize each vertex as a separate set.
3. Iterate Over Edges: Iterate through sorted edges. If adding an edge does not create a cycle, add it to the MST.
4. Union Operation: Perform union operation to merge the sets of two vertices connected by the selected edge.
5. Termination: Stop when MST has (V-1) edges, where V is the number of vertices.

### Example Usage:
- The user is prompted to input the number of vertices (`n`) and the number of edges (`m`).
- Then, the user inputs the edges one by one in the format `(u v w)` where `u` and `v` are vertices and `w` is the weight of the edge.

### Complexity:
- The time complexity of Kruskal's algorithm is O(E log E), where E is the number of edges.
- The space complexity is O(V + E), where V is the number of vertices.

This code efficiently finds the Minimum Spanning Tree (MST) of a given graph using Kruskal's algorithm.
*/

/*
Let's test the provided code with a sample input. We'll create a simple graph and find its Minimum Spanning Tree (MST) using Kruskal's algorithm.

For demonstration purposes, let's consider the following graph:

```
Number of vertices (n): 4
Number of edges (m): 5

Edges:
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
```

This graph has 4 vertices and 5 edges, and the weights of the edges are provided. We'll input this data into the program and verify the output.

Let's proceed with the test.

```plaintext
Enter the number of vertices: 4
Enter the number of edges: 5
Enter edge (u v w): 0 1 10
Enter edge (u v w): 0 2 6
Enter edge (u v w): 0 3 5
Enter edge (u v w): 1 3 15
Enter edge (u v w): 2 3 4
```

Output (Minimum Spanning Tree):
```plaintext
Edges in the Minimum Spanning Tree:
2 - 3 : 4
0 - 3 : 5
0 - 1 : 10

Minimum Cost of MST: 19
```

In the above output, the Minimum Spanning Tree (MST) is printed along with the edges and their weights. The total cost of the MST is calculated to be 19.
*/


/*
Kruskal's algorithm is a greedy algorithm used to find the Minimum Spanning Tree (MST) of a connected, undirected graph. It was developed by Joseph Kruskal in 1956. Here's a detailed explanation of how Kruskal's algorithm works:

### Key Concepts:
1. Minimum Spanning Tree (MST):
   - A spanning tree of a graph is a subgraph that includes all the vertices of the graph with the minimum possible number of edges.
   - A Minimum Spanning Tree is a spanning tree with the minimum possible sum of edge weights.

2. Greedy Approach:
   - Kruskal's algorithm is based on a greedy approach, meaning it makes locally optimal choices at each step with the hope of finding a global optimum.

### Algorithm Steps:
1. Sort Edges by Weight:
   - Sort all the edges of the graph in non-decreasing order of their weights.

2. Initialize Sets:
   - Initialize each vertex of the graph as a separate set.

3. Iterate Over Sorted Edges:
   - Iterate through the sorted edges. At each step, consider the next edge with the smallest weight.

4. Check for Cycle:
   - For each edge, check if adding it to the MST creates a cycle. If adding the edge does not create a cycle (i.e., the vertices of the edge belong to different sets), include it in the MST.
   - This cycle check is typically performed using a disjoint-set data structure (union-find).

5. Union Operation:
   - If adding the edge does not create a cycle, perform the union operation to merge the sets of the two vertices connected by the edge.
   - This operation ensures that the connected components of the graph are maintained.

6. Termination:
   - Stop when all vertices are connected (i.e., when the MST has (V-1) edges, where V is the number of vertices).

### Example:
Consider the following graph:

```
         4
   (0)------(1)
    | \      |
    |  \15   |
    |   \    |
    |    \   |
   5|    10\ |6
    |       \|
    |   4    |
   (2)------(3)
         4
```

1. Sort the edges by weight: [(2, 3, 4), (0, 3, 5), (0, 2, 5), (0, 1, 10), (1, 3, 15)].
2. Initialize sets for each vertex.
3. Iterate through sorted edges.
4. Add edges (2, 3, 4), (0, 3, 5), (0, 1, 10) to the MST without creating cycles.
5. Merge sets of vertices connected by these edges.
6. Terminate when all vertices are connected.

### Complexity:
- The time complexity of Kruskal's algorithm is O(E log E), where E is the number of edges.
- The space complexity is O(V + E), where V is the number of vertices.

In summary, Kruskal's algorithm is a popular method for finding the Minimum Spanning Tree of a graph. It's efficient, easy to implement, and guarantees an optimal solution.

*/



