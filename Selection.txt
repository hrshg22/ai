def selection_sort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n):
        # Find the minimum element in the unsorted portion of the array
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j

        # Swap the found minimum element with the first element
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

    return arr

# Example usage:
"""arr = [64, 25, 12, 22, 11]
sorted_arr = selection_sort(arr)
print("Sorted array:", sorted_arr)"""

def main():
    # Take array as user input
    arr = list(map(int, input("Enter the array elements separated by space: ").split()))

    # Call selection_sort function to sort the array
    sorted_arr = selection_sort(arr)

    # Print the sorted array
    print("Sorted array:", sorted_arr)

if __name__ == "__main__":
    main()


/*
This Python script implements the selection sort algorithm to sort an array of integers. Here's how it works:

1. Selection Sort Function (`selection_sort`):
   - This function takes an array (`arr`) as input and sorts it in ascending order.
   - It iterates over the array and, for each iteration, finds the index of the minimum element in the unsorted portion of the array.
   - Once the minimum element is found, it swaps it with the first element of the unsorted portion.
   - This process is repeated until the entire array is sorted.
   - Finally, it returns the sorted array.

2. Main Function (`main`):
   - The `main` function serves as the entry point of the program.
   - It prompts the user to input an array of integers separated by spaces.
   - It calls the `selection_sort` function to sort the input array.
   - Finally, it prints the sorted array.

3. Example Usage:
   - An example usage is provided in comments. It creates an array `[64, 25, 12, 22, 11]`, sorts it using `selection_sort`, and prints the sorted array.

4. Execution:
   - The `if __name__ == "__main__":` block ensures that `main` is executed only if the script is run directly (not imported as a module).

Overall, this script allows users to input an array of integers and sorts it using the selection sort algorithm, demonstrating its functionality through example usage.*/

/*
Certainly! Selection sort is a simple comparison-based sorting algorithm. Here's a more detailed explanation of how it works and its complexity:

### How Selection Sort Works:

1. Idea:
   - Selection sort divides the input array into two parts: the sorted and the unsorted subarray. Initially, the sorted subarray is empty, and the unsorted subarray contains all elements.
   - It repeatedly finds the smallest (or largest, depending on the sorting order) element from the unsorted subarray and moves it to the beginning of the sorted subarray.
   - This process continues until the entire array is sorted.

2. Algorithm Steps:
   - Start with the first element as the current minimum.
   - Iterate through the unsorted portion of the array to find the minimum element.
   - Swap the minimum element with the first element of the unsorted portion.
   - Move the boundary of the sorted subarray by one element.

3. Example:
   - Consider an array `[64, 25, 12, 22, 11]`.
   - After the first iteration, the minimum element `11` is swapped with the first element, resulting in `[11, 25, 12, 22, 64]`.
   - After the second iteration, the minimum element `12` is swapped with the second element, resulting in `[11, 12, 25, 22, 64]`.
   - This process continues until the array is sorted.

### Complexity Analysis:

1. Time Complexity:
   - Selection sort has a time complexity of O(n^2) for all cases, where n is the number of elements in the array.
   - This is because it involves two nested loops:
     - The outer loop runs n times, iterating through each element of the array.
     - The inner loop runs (n-1) + (n-2) + ... + 1 = n(n-1)/2 times, comparing elements and finding the minimum.
   - Although selection sort performs fewer swaps than other O(n^2) algorithms like bubble sort, its time complexity remains the same because the number of comparisons dominates its running time.

2. Space Complexity:
   - Selection sort typically requires only a constant amount of additional space, hence its space complexity is O(1).
   - It doesn't require any additional data structures like merge sort or quick sort, making it space-efficient.

3. Stability:
   - Selection sort is not stable, meaning it may change the relative order of elements with equal keys.
   - This is because it always finds the minimum (or maximum) element and swaps it with the first unsorted element, potentially disrupting the order of equal elements.

4. In-Place Sorting:
   - Selection sort is an in-place sorting algorithm, meaning it sorts the array without requiring extra space for auxiliary data structures.

Overall, while selection sort is simple to implement and understand, it's not the most efficient sorting algorithm for large datasets due to its O(n^2) time complexity. It's mainly used for educational purposes or for sorting small arrays where its simplicity and low overhead may outweigh its inefficiency.


*/



