import heapq

def dijkstra(graph, start):
    # Initialize distances from start node to all other nodes as infinity
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Priority queue to store nodes to be visited, with the start node having distance 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # If current node is already visited with a shorter distance, skip it
        if current_distance > distances[current_node]:
            continue

        # Explore neighbors of the current node
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            # Update distance if a shorter path is found
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

def main():
    # Take user input for graph
    graph = {}
    num_edges = int(input("Enter the number of edges: "))
    for _ in range(num_edges):
        u, v, weight = input("Enter edge and weight (start end weight): ").split()
        weight = int(weight)
        if u not in graph:
            graph[u] = {}
        graph[u][v] = weight

    start_node = input("Enter start node: ")
    shortest_distances = dijkstra(graph, start_node)

    print("Shortest distances from node", start_node)
    for node, distance in shortest_distances.items():
        print("To node", node, ":", distance)

if __name__ == "__main__":
    main()


/*
This Python code implements Dijkstra's algorithm for finding the shortest paths from a given start node to all other nodes in a weighted graph. Let's break down the code:

### `dijkstra` Function:
- Input: Accepts a graph represented as a dictionary of dictionaries, where each node is a key, and its value is another dictionary containing its neighbors as keys and their corresponding edge weights as values. Additionally, it takes a start node as input.
- Output: Returns a dictionary containing the shortest distances from the start node to all other nodes in the graph.
- Algorithm:
  - Initialize a dictionary `distances` to store the shortest distances from the start node to all other nodes. Set distances to all nodes as infinity, except for the start node which is set to 0.
  - Initialize a priority queue `priority_queue` with the start node and its distance (0).
  - While the priority queue is not empty:
    - Pop the node with the shortest distance from the priority queue.
    - Iterate over its neighbors and update their distances if a shorter path is found.
    - Push the updated distances and nodes to the priority queue.
  - Return the distances dictionary.

### `main` Function:
- Input: Takes user input for the graph and the start node.
- Output: Prints the shortest distances from the start node to all other nodes in the graph.
- Algorithm:
  - Prompt the user to input the number of edges in the graph.
  - For each edge, prompt the user to input the start node, end node, and weight of the edge. Update the graph dictionary accordingly.
  - Prompt the user to input the start node for Dijkstra's algorithm.
  - Call the `dijkstra` function with the graph and start node.
  - Print the shortest distances from the start node to all other nodes.

### Complexity:
- The time complexity of Dijkstra's algorithm is O((V + E) log V), where V is the number of vertices and E is the number of edges.
- The space complexity is O(V) due to the storage of distances for each node.

### Example Usage:
```
Enter the number of edges: 4
Enter edge and weight (start end weight): A B 5
Enter edge and weight (start end weight): A C 3
Enter edge and weight (start end weight): B D 2
Enter edge and weight (start end weight): C D 4
Enter start node: A
```

### Sample Output:
```
Shortest distances from node A
To node A : 0
To node B : 5
To node C : 3
To node D : 7
```

This output indicates the shortest distances from node A to all other nodes in the graph.
*/


/*
Kruskal's algorithm is a greedy algorithm used to find the Minimum Spanning Tree (MST) of a connected, undirected graph. It was developed by Joseph Kruskal in 1956 and is widely used due to its simplicity and efficiency. Here's a detailed explanation of how Kruskal's algorithm works:

### Key Concepts:
1. Minimum Spanning Tree (MST):
   - A spanning tree of a graph is a subgraph that includes all the vertices of the graph with the minimum possible number of edges.
   - A Minimum Spanning Tree is a spanning tree with the minimum possible sum of edge weights.

2. Greedy Approach:
   - Kruskal's algorithm is based on a greedy approach, meaning it makes locally optimal choices at each step with the hope of finding a global optimum.

### Algorithm Steps:
1. Sort Edges by Weight:
   - Sort all the edges of the graph in non-decreasing order of their weights.

2. Initialize Sets:
   - Initialize each vertex of the graph as a separate set.

3. Iterate Over Sorted Edges:
   - Iterate through the sorted edges. At each step, consider the next edge with the smallest weight.

4. Check for Cycle:
   - For each edge, check if adding it to the MST creates a cycle. If adding the edge does not create a cycle (i.e., the vertices of the edge belong to different sets), include it in the MST.
   - This cycle check is typically performed using a disjoint-set data structure (union-find).

5. Union Operation:
   - If adding the edge does not create a cycle, perform the union operation to merge the sets of the two vertices connected by the edge.
   - This operation ensures that the connected components of the graph are maintained.

6. Termination:
   - Stop when all vertices are connected (i.e., when the MST has (V-1) edges, where V is the number of vertices).

### Example:
Consider the following graph:

```
         4
   (0)------(1)
    | \      |
    |  \15   |
    |   \    |
    |    \   |
   5|    10\ |6
    |       \|
    |   4    |
   (2)------(3)
         4
```

1. Sort the edges by weight: [(2, 3, 4), (0, 3, 5), (0, 2, 5), (0, 1, 10), (1, 3, 15)].
2. Initialize sets for each vertex.
3. Iterate through sorted edges.
4. Add edges (2, 3, 4), (0, 3, 5), (0, 1, 10) to the MST without creating cycles.
5. Merge sets of vertices connected by these edges.
6. Terminate when all vertices are connected.

### Complexity:
- The time complexity of Kruskal's algorithm is O(E log E), where E is the number of edges.
- The space complexity is O(V + E), where V is the number of vertices.

In summary, Kruskal's algorithm is a popular method for finding the Minimum Spanning Tree of a graph. It's efficient, easy to implement, and guarantees an optimal solution.
*/